import re
from app.external.google_maps import GoogleMapsClient
from app.external.geo_db import GeoDBClient
from app.utils.geography import calculate_distance_km, generate_random_coordinates_in_radius

class LocationService:
    """Service for handling location-related operations"""
    
    def __init__(self):
        self.google_maps = GoogleMapsClient()
        self.geo_db = GeoDBClient()
    
    async def get_nearby_cities(self, lat: float, lng: float, radius: int) -> list[str]:
        """Get nearby cities using GeoDB API"""
        return self.geo_db.get_nearby_cities(lat, lng, radius)
    
    async def get_location_details(self, lat: float, lng: float) -> dict:
        """Get location details using Google Maps reverse geocoding"""
        return self.google_maps.reverse_geocode(lat, lng)
    
    async def enrich_and_validate_plan(self, start_coords: tuple, days: list, radius_km: int) -> list:
        """Add coordinates, validate radius, and optimize route order"""
        enriched = []
        
        # First pass: Get coordinates for all days
        for day in days:
            # Try to geocode the location
            coords = self.google_maps.geocode(day['town'], day['place'])
            
            if not coords:
                # Generate random coordinates within radius
                coords = generate_random_coordinates_in_radius(start_coords[0], start_coords[1], radius_km)
            
            # Validate distance
            distance_km = calculate_distance_km(start_coords, coords)
            if distance_km > radius_km:
                coords = generate_random_coordinates_in_radius(start_coords[0], start_coords[1], radius_km)
                distance_km = calculate_distance_km(start_coords, coords)
            
            day['lat'], day['lng'] = coords
            day['distance_from_start'] = round(distance_km, 1)
            enriched.append(day)
            
            print(f"✅ Day {day['day']}: {day['place']} -> ({day['lat']:.4f}, {day['lng']:.4f}) "
                  f"[{distance_km:.1f}km from USER coordinates {start_coords[0]:.4f}, {start_coords[1]:.4f}]")
        
        return enriched
    
    def get_location_context(self, destination: str) -> str:
        """Get geographical and cultural context for the location"""
        # Extract coordinates
        match = re.search(r"Lat:\s*([0-9\.-]+),\s*Lng:\s*([0-9\.-]+)", destination)
        if not match:
            return "Location coordinates not available."
        
        lat, lng = map(float, match.groups())
        
        # Determine region/country based on coordinates
        context = []
        
        # European regions (expand as needed)
        if 49.0 <= lat <= 55.0 and 14.0 <= lng <= 24.0:
            context.append("Region: Central/Eastern Poland")
            context.append("Cultural context: Rich medieval history, traditional Polish architecture, religious sites")
            context.append("Typical attractions: Gothic churches, market squares, folk museums, traditional restaurants")
        elif 45.0 <= lat <= 49.0 and 16.0 <= lng <= 23.0:
            context.append("Region: Central Europe (Hungary/Slovakia area)")
            context.append("Cultural context: Habsburg heritage, thermal baths, medieval castles")
            context.append("Typical attractions: Historic castles, thermal spas, wine regions, traditional markets")
        elif 47.0 <= lat <= 51.0 and 2.0 <= lng <= 8.0:
            context.append("Region: France/Western Europe")
            context.append("Cultural context: French culture, cuisine, historic châteaux")
            context.append("Typical attractions: Historic châteaux, vineyards, cathedrals, museums")
        elif 50.0 <= lat <= 55.0 and 3.0 <= lng <= 15.0:
            context.append("Region: Germany/Central Europe")
            context.append("Cultural context: Germanic heritage, medieval towns, beer culture")
            context.append("Typical attractions: Medieval old towns, breweries, castles, Christmas markets")
        elif 41.0 <= lat <= 47.0 and 12.0 <= lng <= 19.0:
            context.append("Region: Italy/Southern Europe")
            context.append("Cultural context: Roman heritage, Renaissance art, Mediterranean cuisine")
            context.append("Typical attractions: Ancient ruins, Renaissance palaces, piazzas, authentic trattorias")
        else:
            context.append(f"Coordinates: {lat:.4f}, {lng:.4f}")
            context.append("Cultural context: Local regional attractions and landmarks")
            context.append("Focus on: Local history, traditional architecture, regional cuisine")
        
        # Add general guidance
        context.append("\nPLEASE SUGGEST:")
        context.append("- Specific named landmarks, churches, museums, restaurants")
        context.append("- Real street names and addresses where possible")
        context.append("- Local specialties and traditional dishes to try")
        context.append("- Historical sites with actual historical significance")
        context.append("- Authentic local experiences, not tourist traps")
        
        return "\n".join(context)